<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aid&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aimerbsq.com/"/>
  <updated>2017-01-13T11:49:50.549Z</updated>
  <id>http://blog.aimerbsq.com/</id>
  
  <author>
    <name>Aid Chow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.aimerbsq.com/2017/01/13/hello-world/"/>
    <id>http://blog.aimerbsq.com/2017/01/13/hello-world/</id>
    <published>2017-01-13T07:43:54.216Z</published>
    <updated>2017-01-13T11:49:50.549Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>navigationView的使用</title>
    <link href="http://blog.aimerbsq.com/2016/10/10/android-navigationview/"/>
    <id>http://blog.aimerbsq.com/2016/10/10/android-navigationview/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-10T14:42:42.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>好记性，不如烂笔头</p>
</blockquote>
<p>最近自己做的一个练手项目用到了，navigationView，其中也遇到了一些问题，今天在这里总结一下他的用法。</p>
<h1 id="First-准备工作"><a href="#First-准备工作" class="headerlink" title="First 准备工作"></a>First 准备工作</h1><p>首先在app的<code>build.gradle</code>文件里添加依赖 <figure class="highlight plain"><figcaption><span>'com.android.support:design:24.1.1'```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># Second 在xml中文件使用</div><div class="line">平时使用我们都是将navigationView置于`DrawerLayout`中,所以我们这样定义布局</div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:id=&quot;@+id/drawer_layout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:fitsSystemWindows=&quot;true&quot;&gt;</div><div class="line">&lt;!-- 内容区域 --&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">        &lt;include</div><div class="line">            android:id=&quot;@+id/toolbar_container&quot;</div><div class="line">            layout=&quot;@layout/toolbar&quot; /&gt;</div><div class="line">	</div><div class="line">        &lt;include</div><div class="line">            android:id=&quot;@+id/container&quot;</div><div class="line">            layout=&quot;@layout/drawer_content&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;!-- navigationView --&gt;</div><div class="line">    &lt;android.support.design.widget.NavigationView</div><div class="line">        android:id=&quot;@+id/navgation_view&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:layout_gravity=&quot;left&quot;</div><div class="line">        app:headerLayout=&quot;@layout/nav_header&quot;</div><div class="line">        app:menu=&quot;@menu/drawer&quot; /&gt;</div><div class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在上面的代码我们可以看到navigationView包含了一个<code>header</code>布局和一个<code>menu</code>作用如图：<br><img src="http://7xslkm.com1.z0.glb.clouddn.com/Screenshot_20161010-202542.png" alt=""></p>
<p>其中<code>nav_header</code>布局通过<code>app:headerLayout=&quot;@layout/nav_header&quot;</code>添加，<code>nav_header</code>布局如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"192dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"bottom"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"每日一图"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>drawer</code>通过<code>app:menu=&quot;@menu/drawer&quot;</code>添加,<code>drawer</code>代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_today_photo"</span></div><div class="line">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_photo_today"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"@string/today_photo"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_more_photo"</span></div><div class="line">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_photo_more"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"@string/more_photo"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:title</span>=<span class="string">"@string/others"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">group</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/nav_setting"</span></div><div class="line">                    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings"</span></div><div class="line">                    <span class="attr">android:title</span>=<span class="string">"@string/setting"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ok，经过上面的一系列的操作，我们的布局文件就设置好了，接下来就是在java源码中实现</p>
<h1 id="Thrid-java源码实现"><a href="#Thrid-java源码实现" class="headerlink" title="Thrid java源码实现"></a>Thrid java源码实现</h1><ol>
<li><p>实现<code>toolbar</code>在activity中可用</p>
<p> <code>setSupportActionBar(toolbar);</code></p>
</li>
<li><p>实现<code>menu</code>中<code>item</code>的点击事件<br> 主要是实现<code>navgationView.setNavigationItemSelectedListener()</code>这个方法，代码如下</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpdrawerContent</span><span class="params">(NavigationView navgationView)</span> </span>&#123;</div><div class="line">        navgationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                selectDrawerItem(item);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectDrawerItem</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.nav_today_photo:</div><div class="line">                controlShowFragment(<span class="number">0</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.nav_more_photo:</div><div class="line">                controlShowFragment(<span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        item.setChecked(<span class="keyword">true</span>);</div><div class="line">        toolbar.setTitle(item.getTitle());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>完成这一步我们的<code>item</code>就可一响应事件了,响应事件其实大多数时候我们也是进行内容区域的切换，<br>这里我实现了<code>Fragment</code>的切换，主要代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">controlShowFragment</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">       FragmentManager fm = getSupportFragmentManager();</div><div class="line">       FragmentTransaction ft = fm.beginTransaction();</div><div class="line">       Fragment oldFragment = fm.findFragmentByTag(makeTag(mCurrentPosition));</div><div class="line">       <span class="keyword">if</span> (oldFragment != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (fm.getBackStackEntryCount() != <span class="number">0</span>) &#123;</div><div class="line">                   fm.popBackStack();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           ft.hide(oldFragment);</div><div class="line">       &#125;</div><div class="line">       mCurrentPosition = position;</div><div class="line">       Fragment currentFagment = fm.findFragmentByTag(makeTag(position));</div><div class="line">       <span class="keyword">if</span> (currentFagment != <span class="keyword">null</span>) &#123;</div><div class="line">           ft.show(currentFagment);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (position != <span class="number">0</span>) &#123;</div><div class="line">               ft.addToBackStack(makeTag(position));</div><div class="line">           &#125;</div><div class="line">           ft.add(R.id.frame_content, getFragment(position),</div><div class="line">                   makeTag(position));</div><div class="line">       &#125;</div><div class="line">       ft.commitAllowingStateLoss();</div><div class="line">       <span class="keyword">if</span> (drawerLayout.isShown()) &#123;</div><div class="line">           drawerLayout.closeDrawers();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里完成这两步基本上，就快大功告成了</p>
<h1 id="Four-和toolbar绑定，实现汉堡菜单动画效果"><a href="#Four-和toolbar绑定，实现汉堡菜单动画效果" class="headerlink" title="Four 和toolbar绑定，实现汉堡菜单动画效果"></a>Four 和<code>toolbar</code>绑定，实现汉堡菜单动画效果</h1><p>平时我们在使用<code>google</code>家的app的时候可以看到当我们的侧滑滑动的时候<code>toolbar</code>的汉堡菜单有一个动画效果<br>这里我们需要用到<code>ActionBarDrawerToggle</code>这个类，实现如下</p>
<ul>
<li><code>DrawerLayout</code> 和 <code>Toolbar</code>进行绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mDrawerToggle = setUpdrawerToggle();</div><div class="line"><span class="comment">//DrawerLayout和ActionBarDrawerToggle进行事件绑定</span></div><div class="line">drawerLayout.addDrawerListener(mDrawerToggle);</div></pre></td></tr></table></figure>
<p>实例化<code>ActionBarDrawerToggle</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 资源文件strings.xml中定义如下两个string --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"open_content_drawer"</span>&gt;</span>Open the main menu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"close_content_drawer"</span>&gt;</span>Close the main menu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ActionBarDrawerToggle <span class="title">setUpdrawerToggle</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ActionBarDrawerToggle(<span class="keyword">this</span>, drawerLayout, toolbar,</div><div class="line">		R.string.open_content_drawer, R.string.close_content_drawer);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>同步状态</li>
</ul>
<p>当app的屏幕重新加载或者配置改变之后，我们需要DrawerToggle的状态同步</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">        <span class="comment">// Pass any configuration change to the drawer toggles</span></div><div class="line">        mDrawerToggle.onConfigurationChanged(newConfig);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line">        <span class="comment">// Sync the toggle state after onRestoreInstanceState has occurred.</span></div><div class="line">        mDrawerToggle.syncState();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="Five-最终步骤"><a href="#Five-最终步骤" class="headerlink" title="Five 最终步骤"></a>Five 最终步骤</h1><p>重写<code>onOptionsItemSelected(MenuItem item)</code>方法，实现当点击actionbar的home/up时可以关闭，开启drwaer(侧滑栏)<br><code>ActionBarDrawerToggle</code>可以响应事件,代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">           <span class="keyword">case</span> android.R.id.home:</div><div class="line">               drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//允许ActionBarDrawerToggle处理事件</span></div><div class="line">       <span class="keyword">return</span> mDrawerToggle.onOptionsItemSelected(item) || <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>重写<code>onBackPressed()</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//当drawerLayout开启时，按backUp键时关闭drawerLayout</span></div><div class="line">       <span class="keyword">if</span> (drawerLayout.isDrawerOpen(GravityCompat.START)) &#123;</div><div class="line">           drawerLayout.closeDrawers();</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//管理fragment栈(非必须)</span></div><div class="line">       <span class="keyword">if</span> (getSupportFragmentManager().getBackStackEntryCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">           mCurrentPosition--;</div><div class="line">           getSupportFragmentManager().popBackStack();</div><div class="line">           navgationView.setCheckedItem(navgationView.getMenu().getItem(mCurrentPosition).getItemId());</div><div class="line">           toolbar.setTitle(navgationView.getMenu().getItem(mCurrentPosition).getTitle());</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">super</span>.onBackPressed();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="Six-其他一些细节处理"><a href="#Six-其他一些细节处理" class="headerlink" title="Six 其他一些细节处理"></a>Six 其他一些细节处理</h1><p>进入app默认选择第一个</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">`headerLayout`布局获得</div><div class="line"></div><div class="line">    ```View hedaderView = navgationView.getHeaderView(0);</div></pre></td></tr></table></figure>
</code></pre><h1 id="第三方依赖"><a href="#第三方依赖" class="headerlink" title="第三方依赖"></a>第三方依赖</h1><ul>
<li><a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">MaterialDrawer</a></li>
<li><a href="https://github.com/rudsonlive/NavigationDrawer-MaterialDesign" target="_blank" rel="external">NavigationDrawerMaterial</a></li>
</ul>
<h1 id="最终实现效果"><a href="#最终实现效果" class="headerlink" title="最终实现效果"></a>最终实现效果</h1><p><a href="http://7xslkm.com1.z0.glb.clouddn.com/Screencast_2016-10-10-21-42-18%5B1%5D.mp4" target="_blank" rel="external">点击查看视频</a></p>
<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/zhoujunjiang/PhotoOfTheDay" target="_blank" rel="external">源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好记性，不如烂笔头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近自己做的一个练手项目用到了，navigationView，其中也遇到了一些问题，今天在这里总结一下他的用法。&lt;/p&gt;
&lt;h1 id=&quot;First-准备工作&quot;&gt;&lt;a href=&quot;#Fi
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="navigationView" scheme="http://blog.aimerbsq.com/tags/navigationView/"/>
    
  </entry>
  
  <entry>
    <title>Android ListView的学习</title>
    <link href="http://blog.aimerbsq.com/2016/04/24/listview/"/>
    <id>http://blog.aimerbsq.com/2016/04/24/listview/</id>
    <published>2016-04-23T16:00:00.000Z</published>
    <updated>2016-04-24T12:51:32.555Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学而时习之不亦说乎</p>
</blockquote>
<figure class="highlight plain"><figcaption><span>要说也用过不少了，这里再将其剔除来,做一个模仿qq的聊天列表，也算作是复习了。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># First 创建ListView布局</div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;ListView</div><div class="line">	android:id=&quot;@+id/test_list&quot;</div><div class="line">	android:layout_width=&quot;match_parent&quot;</div><div class="line">	android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>
<h1 id="second-实现item布局"><a href="#second-实现item布局" class="headerlink" title="second 实现item布局"></a>second 实现item布局</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:padding</span>=<span class="string">"@dimen/activity_horizontal_margin"</span>&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/left_image"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_alignTop</span>=<span class="string">"@id/left_image"</span></div><div class="line">		<span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/left_image"</span></div><div class="line">		<span class="attr">android:paddingLeft</span>=<span class="string">"10dp"</span></div><div class="line">		<span class="attr">android:text</span>=<span class="string">"title"</span></div><div class="line">		<span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">		<span class="attr">android:textStyle</span>=<span class="string">"bold"</span>/&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/tv_content"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_alignBottom</span>=<span class="string">"@id/left_image"</span></div><div class="line">		<span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/left_image"</span></div><div class="line">		<span class="attr">android:paddingLeft</span>=<span class="string">"10dp"</span></div><div class="line">		<span class="attr">android:text</span>=<span class="string">"content"</span></div><div class="line">	/&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/tv_time"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">		<span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">		<span class="attr">android:layout_alignTop</span>=<span class="string">"@+id/tv_title"</span></div><div class="line">		<span class="attr">android:paddingLeft</span>=<span class="string">"10dp"</span></div><div class="line">		<span class="attr">android:text</span>=<span class="string">"12:00"</span></div><div class="line">	/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如图 <img src="http://7xslkm.com2.z0.glb.clouddn.com/item.png" alt=""></p>
<h1 id="新建实体类用来作为Adapter的适配类型"><a href="#新建实体类用来作为Adapter的适配类型" class="headerlink" title="新建实体类用来作为Adapter的适配类型"></a>新建实体类用来作为Adapter的适配类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String title;</div><div class="line">	<span class="keyword">private</span> String content;</div><div class="line">	<span class="keyword">private</span> String time;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> time;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(String time)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.time = time;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.title = title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> imageId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageId</span><span class="params">(<span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.imageId = imageId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="构建Adapter类"><a href="#构建Adapter类" class="headerlink" title="构建Adapter类"></a>构建Adapter类</h1><p>Adapter ListView和数据源之间的中间人,使用Adapter为ListViwe绑定数据</p>
<p><img src="http://7xslkm.com2.z0.glb.clouddn.com/gx.png" alt=""></p>
<p>Adapter </p>
<pre><code>* 数据进入可见区域时
    * Adapter getView() 方法得到调用
    * 返回代表具体数据的视图
* lisview触摸滚动时，可以频繁的调用
* 支持成百上千的数据
</code></pre><p>当ListView滑动时的一个大概的过程<br><img src="http://7xslkm.com2.z0.glb.clouddn.com/lc.png" alt=""></p>
<p>写一个 <figure class="highlight plain"><figcaption><span>的类继承```BaseAdapter```，```BaseAdapter```实现了```ListAdapter```和```SpinnerAdapter```中的方法</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">当我们继承他时必须要复写以下四个方法</div><div class="line"></div><div class="line">	1. getCount() </div><div class="line">		返回数据集合的大小</div><div class="line">	2. getItem()</div><div class="line">		返回与数据项相关联项的数据</div><div class="line">	3. getItemId()</div><div class="line">		返回item的Id</div><div class="line">	4. getView()</div><div class="line">		返回代表具体数据的视图</div><div class="line"></div><div class="line"># getView()的几种重写</div><div class="line"></div><div class="line">* 最没效率的写法</div><div class="line"></div><div class="line">```java</div><div class="line">	public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">		convertView = mInflater.inflate(R.layout.list_item, null);</div><div class="line">		ImageView imageView = (ImageView) convertView.findViewById(R.id.left_image);</div><div class="line">		TextView title = (TextView) convertView.findViewById(R.id.tv_title);</div><div class="line">		TextView content = (TextView) convertView.findViewById(R.id.tv_content);</div><div class="line">		TextView time = (TextView) convertView.findViewById(R.id.tv_time);</div><div class="line">		imageView.setImageResource(items.get(position).getImageId());</div><div class="line">		title.setText(items.get(position).getTitle());</div><div class="line">		content.setText(items.get(position).getContent());</div><div class="line">		time.setText(items.get(position).getTime());</div><div class="line">		return convertView;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>利用convertView，提升效率的写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">		convertView = mInflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	ImageView imageView = (ImageView) convertView.findViewById(R.id.left_image);</div><div class="line">	TextView title = (TextView) convertView.findViewById(R.id.tv_title);</div><div class="line">	TextView content = (TextView) convertView.findViewById(R.id.tv_content);</div><div class="line">	TextView time = (TextView) convertView.findViewById(R.id.tv_time);</div><div class="line">	imageView.setImageResource(items.get(position).getImageId());</div><div class="line">	title.setText(items.get(position).getTitle());</div><div class="line">	content.setText(items.get(position).getContent());</div><div class="line">	time.setText(items.get(position).getTime());</div><div class="line">	<span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里先判断了一次convertView,如果convertView为空的话，就使用LayoutInflater加载布局，否则就直接复用convertView，<br>这么写就会大大提升效率，现在快速滑动时已经大大的比上一个写法流畅了，虽然不用每次都加载布局了,但是我们每次都还要<br>findViewById()来获取控件的实例，所以我们可以采取下面的写法，再来对效率进行一次提升</p>
<ul>
<li>利用ViewHolder 飞速提升效率</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">	ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">		convertView = mInflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line">		holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">		holder.imageView = (ImageView) convertView.findViewById(R.id.left_image);</div><div class="line">		holder.title = (TextView) convertView.findViewById(R.id.tv_title);</div><div class="line">		holder.content = (TextView) convertView.findViewById(R.id.tv_content);</div><div class="line">		holder.time = (TextView) convertView.findViewById(R.id.tv_time);</div><div class="line">		convertView.setTag(holder);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		holder = (ViewHolder) convertView.getTag();</div><div class="line">	&#125;</div><div class="line">	holder.imageView.setImageResource(items.get(position).getImageId());</div><div class="line">	holder.title.setText(items.get(position).getTitle());</div><div class="line">	holder.content.setText(items.get(position).getContent());</div><div class="line">	holder.time.setText(items.get(position).getTime());</div><div class="line">	<span class="keyword">return</span> convertView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line">	ImageView imageView;</div><div class="line">	TextView title;</div><div class="line">	TextView content;</div><div class="line">	TextView time;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个内部类ViewHolder,对控件实例进行缓存，然后调用convertView的setTag()方法，将ViewHolder对象存在其中，当convertView不为空时<br>就调用getTag()方法将ViewHolder取出，因为所有控件都在ViewHoler中缓存了,所以就不要再findViewById()来获取控件实例了。</p>
<h1 id="构造函数的编写"><a href="#构造函数的编写" class="headerlink" title="构造函数的编写"></a>构造函数的编写</h1><p>继承了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```java</div><div class="line">	public MyAdapter(Context context, List&lt;Item&gt; items) &#123;</div><div class="line">		this.mInflater = LayoutInflater.from(context);</div><div class="line">		this.items = items;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这里通过传来的contex来获取一个LayoutInflater对象，并以此来加载布局。</p>
<h1 id="在activi中的实现"><a href="#在activi中的实现" class="headerlink" title="在activi中的实现"></a>在activi中的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.listview_layout);</div><div class="line">		ListView listView = (ListView) findViewById(R.id.test_list);</div><div class="line">		<span class="keyword">final</span> List&lt;Item&gt; mData = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		Item item = <span class="keyword">new</span> Item();</div><div class="line">		<span class="comment">//实例化adapter</span></div><div class="line">		MyAdapter adapter = <span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>, mData);</div><div class="line">		<span class="comment">//创建原数据</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">			item.setContent(<span class="string">"吃饭么？"</span>);</div><div class="line">			item.setTitle(<span class="string">"小明"</span>);</div><div class="line">			item.setTime(<span class="string">"7:00"</span>);</div><div class="line">			item.setImageId(R.mipmap.ic_launcher);</div><div class="line">			mData.add(item);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//listview绑定adapter</span></div><div class="line">		listView.setAdapter(adapter);</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h1 id="处理item的点击事件"><a href="#处理item的点击事件" class="headerlink" title="处理item的点击事件"></a>处理item的点击事件</h1><p>这里实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```java</div><div class="line">listView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</div><div class="line">			@Override</div><div class="line">			public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">				Toast.makeText(MyActivity.this, mData.get(position).toString(), Toast.LENGTH_SHORT).show();</div><div class="line">				Log.d(&quot;TAG&quot;, String.valueOf(position));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="http://7xslkm.com2.z0.glb.clouddn.com/Screenshot_20160424-173454.png" alt=""><br><img src="http://7xslkm.com2.z0.glb.clouddn.com/Screenshot_20160424-173500.png" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学而时习之不亦说乎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;要说也用过不少了，这里再将其剔除来,做一个模仿qq的聊天列表，也算作是复习了。&lt;/span&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="listview" scheme="http://blog.aimerbsq.com/tags/listview/"/>
    
      <category term="adapter" scheme="http://blog.aimerbsq.com/tags/adapter/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 快捷键</title>
    <link href="http://blog.aimerbsq.com/2016/04/24/android%20stduio-smartkey/"/>
    <id>http://blog.aimerbsq.com/2016/04/24/android stduio-smartkey/</id>
    <published>2016-04-23T16:00:00.000Z</published>
    <updated>2016-09-10T13:54:07.386Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
<p><code>android studio</code> 也用了这么久了可是有的快捷键就是记不住，这里做一个常用快捷键的笔记</p>
<ul>
<li>不定期更新</li>
</ul>
<p><strong>表1.</strong> 部分实用工具窗口和键盘快捷键</p>
<table>
<thead>
<tr>
<th>工具窗口</th>
<th style="text-align:right">Windows和linux</th>
<th style="text-align:right">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>项目</td>
<td style="text-align:right">Alt + 1</td>
<td style="text-align:right">Command + 1</td>
</tr>
<tr>
<td>版本</td>
<td style="text-align:right">Alt + 9</td>
<td style="text-align:right">Command + 9</td>
</tr>
<tr>
<td>运行</td>
<td style="text-align:right">Shift + F10</td>
<td style="text-align:right">Command + R</td>
</tr>
<tr>
<td>调试</td>
<td style="text-align:right">Shift + F9</td>
<td style="text-align:right">Command + D</td>
</tr>
<tr>
<td>Android Monitor</td>
<td style="text-align:right">Alt + 6</td>
<td style="text-align:right">Command + 6</td>
</tr>
<tr>
<td>返回至编辑</td>
<td style="text-align:right">Esc</td>
<td style="text-align:right">Esc</td>
</tr>
<tr>
<td>隐藏所有工具窗口</td>
<td style="text-align:right">Control + Shift + F12</td>
<td style="text-align:right">Command + Shift + F12</td>
</tr>
</tbody>
</table>
<p><strong>表2.</strong> 通用快捷键</p>
<table>
<thead>
<tr>
<th>描述</th>
<th style="text-align:right">Windows和linux</th>
<th style="text-align:right">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>保存所有</td>
<td style="text-align:right">Control + S</td>
<td style="text-align:right">Command + S</td>
<td>`</td>
</tr>
<tr>
<td>同步</td>
<td style="text-align:right">Control + Alt + Y</td>
<td style="text-align:right">Command + Option + Y</td>
</tr>
<tr>
<td>检查当前文件下的配置</td>
<td style="text-align:right">Alt + Shift + I</td>
<td style="text-align:right">Control + Command + I</td>
</tr>
<tr>
<td>添加到喜欢</td>
<td style="text-align:right">Alt + Shift + F</td>
<td style="text-align:right">Option + Shift + F</td>
</tr>
<tr>
<td>切换配置</td>
<td style="text-align:right">Control +  `</td>
<td style="text-align:right">Control +  `</td>
</tr>
<tr>
<td>打开设置</td>
<td style="text-align:right">Control + Alt + S</td>
<td style="text-align:right">Command + ,</td>
</tr>
<tr>
<td>打开项目结构</td>
<td style="text-align:right">Control + Shift + Alt + S</td>
<td style="text-align:right">Command + ;</td>
</tr>
<tr>
<td>切换编辑和工具窗</td>
<td style="text-align:right">Control + Tab</td>
<td style="text-align:right">Control + Tab</td>
</tr>
</tbody>
</table>
<p><strong>表3.</strong> 在Studio导航和搜索快捷键</p>
<table>
<thead>
<tr>
<th>描述</th>
<th style="text-align:right">Windows和linux</th>
<th style="text-align:right">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局搜索</td>
<td style="text-align:right">按两下Shift</td>
<td style="text-align:right">按两下Shift</td>
</tr>
<tr>
<td>查找</td>
<td style="text-align:right">Control + F</td>
<td style="text-align:right">Command + F</td>
</tr>
<tr>
<td>查找下一个</td>
<td style="text-align:right">F3</td>
<td style="text-align:right">Command + G</td>
</tr>
<tr>
<td>查找前一个</td>
<td style="text-align:right">Shift + F3</td>
<td style="text-align:right">Command + Shift + G</td>
</tr>
<tr>
<td>替换</td>
<td style="text-align:right">Control + R</td>
<td style="text-align:right">Command + R</td>
</tr>
<tr>
<td>查找动作</td>
<td style="text-align:right">Control + Shift + A</td>
<td style="text-align:right">Command +Shift + A</td>
</tr>
<tr>
<td>通过简单名搜索</td>
<td style="text-align:right">Control + Shift + Alt + N</td>
<td style="text-align:right">Command + Option + O</td>
</tr>
<tr>
<td>查找类</td>
<td style="text-align:right">Control + N</td>
<td style="text-align:right">Command + O</td>
</tr>
<tr>
<td>查找文件</td>
<td style="text-align:right">Control + Shift + N</td>
<td style="text-align:right">Command + Shift + O</td>
</tr>
<tr>
<td>弹出文件结构</td>
<td style="text-align:right">Control + F12</td>
<td style="text-align:right">Command + F12</td>
</tr>
<tr>
<td>打开的编辑文件之间导航</td>
<td style="text-align:right">Alt + Right/Left Arrow</td>
<td style="text-align:right">Control + Right/Left Arrow</td>
</tr>
<tr>
<td>跳到源码</td>
<td style="text-align:right">F4 / Control + Enter</td>
<td style="text-align:right">F4 / Command + Down Arrow</td>
</tr>
<tr>
<td>在新窗口打开最近编辑文件</td>
<td style="text-align:right">Shift + F4</td>
<td style="text-align:right">Shift + F4</td>
</tr>
<tr>
<td>最近打开文件弹窗</td>
<td style="text-align:right">Control + E</td>
<td style="text-align:right">Command + E</td>
</tr>
<tr>
<td>最近编辑文件弹窗</td>
<td style="text-align:right">Control + Shift + E</td>
<td style="text-align:right">Command + Shift + E</td>
</tr>
<tr>
<td>打开上一个编辑处</td>
<td style="text-align:right">Control + Shift + Bacspace</td>
<td style="text-align:right">Command + Shift + Bacspace</td>
</tr>
<tr>
<td>关闭活跃窗口</td>
<td style="text-align:right">Control + F4</td>
<td style="text-align:right">Command + W</td>
</tr>
<tr>
<td>隐藏活动的或者上一个活动的工具窗</td>
<td style="text-align:right">Shift + Esc</td>
<td style="text-align:right">Shift + Esc</td>
</tr>
<tr>
<td>去到某一行</td>
<td style="text-align:right">Control + G</td>
<td style="text-align:right">Command + L</td>
</tr>
<tr>
<td>打开类型的继承结构</td>
<td style="text-align:right">Control + H</td>
<td style="text-align:right">Control + H</td>
</tr>
<tr>
<td>打开方法层次结构</td>
<td style="text-align:right">Control + Shift + H</td>
<td style="text-align:right">Command + Shift + H</td>
</tr>
<tr>
<td>打开回调层次结构</td>
<td style="text-align:right">Control + Alt + H</td>
<td style="text-align:right">Control + Option + H</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;android studio&lt;/code&gt; 也用了这么久了可是有的快捷键就是记不住，这里做一个常用快捷键的笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不定期更新&lt;/li&gt;
&lt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.aimerbsq.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>Broadcast receiver学习笔记</title>
    <link href="http://blog.aimerbsq.com/2016/04/17/firstcode-learn-broadcast-reciver/"/>
    <id>http://blog.aimerbsq.com/2016/04/17/firstcode-learn-broadcast-reciver/</id>
    <published>2016-04-16T16:00:00.000Z</published>
    <updated>2016-04-18T05:36:08.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>行者，始于足下</p>
</blockquote>
<h1 id="android中的广播类型"><a href="#android中的广播类型" class="headerlink" title="android中的广播类型"></a>android中的广播类型</h1><ol>
<li><p>标准广播(Nomal broadcasts)</p>
<ol>
<li><p>完全的异步，广播发出之后，所有的广播接收器会同时接受到这条广播消息</p>
</li>
<li><p>执行流程图 <img src="http://7xslkm.com2.z0.glb.clouddn.com/lct.png" alt=""></p>
</li>
</ol>
</li>
<li><p>有序广播(Ordered broadcastes)</p>
<ol>
<li><p>同步执行的广播，广播发出后，同一时刻只会有一个广播接收器接收到消息，只有当前的广播接收器逻辑执行完了，才会传递</p>
</li>
<li><p>广播执行具有先后顺序，按照优先级的高低传递</p>
</li>
<li><p>执行流程图 <img src="http://7xslkm.com2.z0.glb.clouddn.com/lct2.png" alt=""></p>
</li>
</ol>
</li>
</ol>
<h1 id="接收广播系统"><a href="#接收广播系统" class="headerlink" title="接收广播系统"></a>接收广播系统</h1><p>Android内置了很多系统级别的广播，应用程序可以通过监听这些广播来得到各种系统的信息状态</p>
<h1 id="广播接收器-Broadcaste-receiver"><a href="#广播接收器-Broadcaste-receiver" class="headerlink" title="广播接收器(Broadcaste receiver)"></a>广播接收器(Broadcaste receiver)</h1><p>要接受到发送的广播，就需要用到广播接收器，广播接收器可用于对我们所感兴趣的广播进行注册。<br>注册过后的广播在广播接收器中就能接受到此广播发送的消息</p>
<p>注册方式一般有两种：在<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 动态注册</div><div class="line"></div><div class="line">	1. 创建广播接收器</div><div class="line"></div><div class="line">		新建类继承```BroadcastReceiver```,重写```onReceive()```方法。</div><div class="line">		```onReceive()```在广播消息来时执行，我们对于广播逻辑的处理就在这个方法中进行。</div><div class="line"></div><div class="line">	2. 代码中动态注册广播</div><div class="line"></div><div class="line">		* 第一步需要有IntentFilter 实例用于发送所要传递的广播消息</div><div class="line">		* 第二步实例化 我们创建的广播接收器</div><div class="line">		* 第三步调用registerReceiver()方法传入我们的广播接收器实例和IntentFilter实例</div><div class="line">		* 第四步取消注册调用unregisterReceiver()方法取消我们刚才注册的广播</div><div class="line"></div><div class="line">		动态注册只有在程序启动后才能接收广播</div><div class="line">	</div><div class="line">	3. 静态注册</div><div class="line"></div><div class="line">		* 在AndroidManifest.xml 中注册静态广播 ```&lt;receiver&gt;```标签中注册和注册activity类似</div><div class="line">		* 是系统级别的不启动系统也能接受到广播</div><div class="line">	</div><div class="line">		```注: onReceive()方法中不允许有耗时操作也不要添加过多的逻辑代码</div></pre></td></tr></table></figure></p>
<h1 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h1><ol>
<li><p>发送标准广播</p>
<ul>
<li>定义广播接收器接收广播</li>
<li>自定义IntentFilter action</li>
<li>调用sendBroadcast()方法发送自定义的意图</li>
</ul>
</li>
<li><p>发送有序广播</p>
<ul>
<li>调用sendOrderedBroadcast()发送有序广播</li>
<li>可设置广播接收器的优先级，可使优先级高的先接收到广播 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	* 在广播接收器中可调用abortBroadcast()截断有序广播</div><div class="line"></div><div class="line">3. 使用本地广播</div><div class="line"></div><div class="line">	使用全局广播，安全性不是很好，因此可以使用发送本地广播</div><div class="line"></div><div class="line">	* 只接受本应用程序发送的广播</div><div class="line">	* 使用LodalBroadcastManager 对广播进行管理 使用getInstance(context)获取实例化</div><div class="line">	* local.sendBroadcast()发送本地广播</div><div class="line">	* local.registerReceiver()注册本地广播接收器</div><div class="line"></div><div class="line">	```注：本地广播只可以通过动态注册完成接收</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;行者，始于足下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;android中的广播类型&quot;&gt;&lt;a href=&quot;#android中的广播类型&quot; class=&quot;headerlink&quot; title=&quot;android中的广播类型&quot;&gt;&lt;/a&gt;andro
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="broadcast receiver" scheme="http://blog.aimerbsq.com/tags/broadcast-receiver/"/>
    
  </entry>
  
  <entry>
    <title>CentOs ss代理服务器搭建</title>
    <link href="http://blog.aimerbsq.com/2016/04/09/ss-0/"/>
    <id>http://blog.aimerbsq.com/2016/04/09/ss-0/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2016-04-10T02:53:03.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文档的阅读，以及实现</p>
</blockquote>
<p>继续开坑中，一直在用别人的梯子，这里也尝试着搭建一下自己的ss服务器。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>一台位于国外的vps,官方推荐<a href="https://www.digitalocean.com/?refcode=b1cddd149721" target="_blank" rel="external">Digital Ocean</a>和<a href="https://www.linode.com/?r=e7932c8b03f9abc8aab71663b90b689a676402d1" target="_blank" rel="external">Linode</a>,我这里用的是Digital Ocean的vps,系统是CentOs 6.7x64。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line">yum install python-setuptools &amp;&amp; easy_install pip</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>用命令行启动</p>
<p> 格式：</p>
<pre><code>ssserver -p 端口号 -k 密码 -m 加密方式
</code></pre><p> 例如:</p>
<pre><code>ssserver -p 443 -k password -m aes-256-cfb 
</code></pre><p> 在后台运行</p>
<pre><code>sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start
</code></pre><p> 后台运行的停止：</p>
<pre><code>sudo ssserver -d stop
</code></pre><p> 后台运行日志的查看：</p>
<pre><code>sudo less /var/log/shadowsocks.log
</code></pre></li>
<li><p>通过配置文件启动</p>
<p> 新建一个配置文件:</p>
<pre><code>vim /etc/shadowsocks.json
</code></pre></li>
</ol>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;my_server_ip&quot;, 	</div><div class="line">    &quot;server_port&quot;:8388,      	</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, </div><div class="line">    &quot;local_port&quot;:1080,			 </div><div class="line">    &quot;password&quot;:&quot;mypassword&quot;,	</div><div class="line">    &quot;timeout&quot;:300,				</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,		</div><div class="line">    &quot;fast_open&quot;: false			</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>| 名称| 解释|<br>|server| 服务器ip地址|<br>|server_port| 服务器监听端口|<br>|local_address| 本地ip地址|<br>|local_port| 本地端口|<br>|password|密码|<br>|timeout |超时时间|<br>|method|加密方式 默认aes-256-cfb，推荐rc4-md5|<br>|fast_open|true或者false linux内核3.7+以上可以开启 fast_open 以降低延迟|</p>
<p>前台运行</p>
<pre><code>ssserver -c /etc/shadowsocks.json
</code></pre><p>后台运行</p>
<pre><code>ssserver -c /etc/shadowsocks.json -d start
ssserver -c /etc/shadowsocks.json -d stop
</code></pre><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><p><a href="https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="external">按需索取</a></p>
<p>这里已Windows配置为例</p>
<p><img src="http://7xslkm.com2.z0.glb.clouddn.com/ss.png" alt=""></p>
<p>选择服务器，启动代理。运行结果：</p>
<p><img src="http://7xslkm.com2.z0.glb.clouddn.com/ss1.png" alt=""></p>
<h3 id="给更多的人使用"><a href="#给更多的人使用" class="headerlink" title="给更多的人使用"></a>给更多的人使用</h3><p>目前只有Python版和Go语言版支持更多用户</p>
<p>可以在不同的端口设置不同的密码，例如这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;: &quot;0.0.0.0&quot;,</div><div class="line">    &quot;port_password&quot;: &#123;</div><div class="line">        &quot;8381&quot;: &quot;foobar1&quot;,</div><div class="line">        &quot;8382&quot;: &quot;foobar2&quot;,</div><div class="line">        &quot;8383&quot;: &quot;foobar3&quot;,</div><div class="line">        &quot;8384&quot;: &quot;foobar4&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;timeout&quot;: 300,</div><div class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="支持的加密方式"><a href="#支持的加密方式" class="headerlink" title="支持的加密方式"></a>支持的加密方式</h3><p>上面的配置文件中有一个method(加密方式),下面是他支持的加密方式</p>
<ol>
<li><p>SSL library</p>
</li>
<li><p>RC4-MD5</p>
</li>
<li><p>Salsa20, Chacha20</p>
</li>
</ol>
<p>安装 <figure class="highlight plain"><figcaption><span>提升加密速度</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	yum install m2crypto</div><div class="line"></div><div class="line">```rc4-md5``` 为推荐的加密方式</div><div class="line"></div><div class="line">### salsa20 and chacha20</div><div class="line"></div><div class="line">```salsa20``` 和 ```chacha20``` 是更快的流加密方式，比```rc4```更快</div><div class="line"></div><div class="line">要使用这两种加密方式要安装 [libsodium](https://download.libsodium.org/libsodium/releases/)&gt;=1.0.0</div></pre></td></tr></table></figure></p>
<p>sudo wget <a href="https://download.libsodium.org/libsodium/releases/libsodium-1.0.10.tar.gz" target="_blank" rel="external">https://download.libsodium.org/libsodium/releases/libsodium-1.0.10.tar.gz</a><br>tar -xf libsodium-1.0.10.tar.gz<br>cd libsodium-1.0.10<br>sudo make -j2<br>sudo make install<br>sudo ldconfig<br>```</p>
<h4 id="不推荐的加密方式"><a href="#不推荐的加密方式" class="headerlink" title="不推荐的加密方式"></a>不推荐的加密方式</h4><ul>
<li>rc4</li>
<li>des-cfb</li>
<li>table</li>
<li>salsa20-ctr</li>
</ul>
<p>个人也是刚接触这个若有错误，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文档的阅读，以及实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;继续开坑中，一直在用别人的梯子，这里也尝试着搭建一下自己的ss服务器。&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
      <category term="ss" scheme="http://blog.aimerbsq.com/tags/ss/"/>
    
      <category term="linux" scheme="http://blog.aimerbsq.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>用阿里云做ss代理中转</title>
    <link href="http://blog.aimerbsq.com/2016/04/09/ss-1/"/>
    <id>http://blog.aimerbsq.com/2016/04/09/ss-1/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2016-04-10T03:19:02.875Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>要么不做，要么就做到最好</p>
</blockquote>
<p>自从学校机房被烧了以后，学校的校园网就变得有点龟速了，昨天搭建的ss服务器的速度，不是那么的让人满意，<br>然后看到官方文档可以用<figure class="highlight plain"><figcaption><span>```vps做中转也就是试了一下.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">测试服务器 Ubuntu server 14.04</div><div class="line"></div><div class="line">原理是样</div><div class="line"></div><div class="line">	Client &lt;--&gt; 阿里云 vps &lt;--&gt; US VPS</div><div class="line"></div><div class="line">### Step1 安装 haproxy</div><div class="line"></div><div class="line">	sudo apt-get update</div><div class="line">	sudo apt-get install haproxy</div><div class="line"></div><div class="line">### Step2 配置 haproxy</div><div class="line"></div><div class="line">	vim /etc/default/haproxy</div><div class="line">	设置ENABLED=1</div><div class="line"></div><div class="line">	修改配置文件```vim /etc/haproxy/haproxy.cfg</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">global</div><div class="line">        ulimit-n  51200</div><div class="line"></div><div class="line">defaults</div><div class="line">        log global</div><div class="line">        mode    tcp</div><div class="line">        option  dontlognull</div><div class="line">        contimeout 1000</div><div class="line">        clitimeout 150000</div><div class="line">        srvtimeout 150000</div><div class="line"></div><div class="line">frontend ss-in</div><div class="line">        bind *:8388</div><div class="line">        default_backend ss-out</div><div class="line"></div><div class="line">backend ss-out</div><div class="line">        server server1 US_VPS_IP:8388 maxconn 20480</div></pre></td></tr></table></figure>
<p>在Ubuntu的haproxy 不止这些参数，但只要这些就够了</p>
<p>启动<code>haproxy</code> 看到[ok]就可以了</p>
<pre><code>server haproxy  start
</code></pre><p>然后在ss客户端改成你的国内服务器ip就ok了</p>
<p>测试图这里就不上了，运行良好，Android developer 秒开</p>
<p>顺便说一句，如果你只想你的ss代理分享只能在局域网下使用的话，那么你就把上面的代理服务器，<br>设为你在本地的一台服务器或者虚拟机。然后将客户端的服务器ip设为本地服务器的ip<br>即可实现局域网访问了</p>
<p>个人也是刚接触这个若有错误，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;要么不做，要么就做到最好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自从学校机房被烧了以后，学校的校园网就变得有点龟速了，昨天搭建的ss服务器的速度，不是那么的让人满意，&lt;br&gt;然后看到官方文档可以用&lt;figure class=&quot;highlight
    
    </summary>
    
    
      <category term="ss" scheme="http://blog.aimerbsq.com/tags/ss/"/>
    
      <category term="linux" scheme="http://blog.aimerbsq.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android sdk 镜像搭建</title>
    <link href="http://blog.aimerbsq.com/2016/04/08/android-sdk-mirror/"/>
    <id>http://blog.aimerbsq.com/2016/04/08/android-sdk-mirror/</id>
    <published>2016-04-07T16:00:00.000Z</published>
    <updated>2016-04-09T10:35:22.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>不尝试，怎么知道不可以呢？</p>
</blockquote>
<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>昨天实验室，学长突然交代了我个任务去完成。也就是在局域网环境下，搭建一个android sdk 镜像源。其实吧，乍一听到这个任务确实挺懵逼的，从来没做过这事儿完全不知道如何入手。</p>
<h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>少年莫慌，一切肯定都有解决的办法。首先，我在某个技术群里提出了我的想法，然后有人给我方案是rsync,也有人给我的方案是，搭一个翻墙代理，不过后来这些想法都被我否决了。第一我并不知道google 的sdk源支持不支持rsync,然后若是翻墙代理那么这个成本也太高了，失去了搭建这个的意义。然后开始了不断google的过程，经过搜索关键字的不断更换，我发现了这么一篇博客<a href="http://jiajixin.cn/2015/10/11/android-sdk-mirror/" target="_blank" rel="external">Android SDK镜像服务器搭建</a>和我的需求竟是如此的雷同。按照博客的介绍。来到了<a href="https://github.com/opencas/mirrors" target="_blank" rel="external">中科院开源镜像小组</a>首先fork了这个项目，接着clone到本地进行研究。其中有两个文件是需要我们注意的第一个是<a href="https://github.com/opencas/mirrors/blob/master/script/bin/android.py" target="_blank" rel="external">android.py</a>第二个是<a href="https://github.com/opencas/mirrors/blob/master/nginx%2Fconf.d%2F0mirror.conf" target="_blank" rel="external">nginx配置文件</a>总的来说就是这些东西了。</p>
<h1 id="我的搭建过程"><a href="#我的搭建过程" class="headerlink" title="我的搭建过程"></a>我的搭建过程</h1><ol>
<li>linux 服务器的搭建，50g大小的磁盘最好,这里我用的是virtual box创建了ubuntu-server 版的系统(这一步略简单，网上教程很多)</li>
<li>nginx 的安装 推荐教程 <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3" target="_blank" rel="external">How To Set Up nginx Virtual Hosts</a></li>
<li>搭建梯子，用于android sdk 源的下载这里我用的是Shadowsocks 这个就不多说了</li>
<li>运行android.py脚本这里时间可能有点长，毕竟下载的东西比较多</li>
<li>下载完成之后， nginx 服务器的配置，照葫芦画瓢，之接改一下中科院的那个配置文件就ok,主要是    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server_name: your ip adrees or host</div><div class="line">			dl.google.com</div><div class="line">			dl-ssh.google.com;</div></pre></td></tr></table></figure></li>
</ol>
<p>这一行的注意，其余的照着写下来配置就ok了。其实网上的nginx配置的教程也很多，不理解的可以自行goole详细过程</p>
<ol>
<li>配置完成重启服务器，写个定时启动脚本ok<a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html" target="_blank" rel="external">crontab 定时任务</a></li>
<li>回到我们的开发电脑 打开android sdk manager配置如下，这是我的虚拟机ip地址</li>
</ol>
<p><img src="http://7xslkm.com2.z0.glb.clouddn.com/2016-04-08%20%281%29.png" alt=""></p>
<p>测试结果</p>
<p><img src="http://7xslkm.com2.z0.glb.clouddn.com/2016-04-08%20%282%29.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这就是，拿别人轮子来用的一个过程。我认为的注意下这几个点就好了</p>
<ol>
<li>如何越过gfw,这是最关键的一步，一般来说设置个代理就好了</li>
<li>nginx的配置注意第5点说的那个地方也就可以了</li>
<li>定期到用到的轮子那边看看是否有所更新</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不尝试，怎么知道不可以呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h1&gt;&lt;p&gt;昨天实验室，学长突然交代了我个任务去完成。也
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="镜像" scheme="http://blog.aimerbsq.com/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android中的常用布局和控件</title>
    <link href="http://blog.aimerbsq.com/2016/04/04/android-layout-0/"/>
    <id>http://blog.aimerbsq.com/2016/04/04/android-layout-0/</id>
    <published>2016-04-03T16:00:00.000Z</published>
    <updated>2016-04-04T08:58:29.212Z</updated>
    
    <content type="html"><![CDATA[<h4>四大基本布局的思维导图</h4>
<img src="http://7xslkm.com2.z0.glb.clouddn.com/%E5%9B%9B%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3.jpg">

根据第一行代码和官方guide做的一个简单的思维导图,具体的用法当然还是要通过实践，在代码中才能体会其中的真谛。
这里就写这个思维导图是加强自己对于这几种布局的理解。

<h4>android View和widget之间的一个关系图</h4>

<img src="http://7xslkm.com2.z0.glb.clouddn.com/%E7%BB%98%E5%9B%BE2.png">
<p>android中我们不仅可以通过在布局中放控件来构建UI,我们可以通过布局和布局之间的嵌套来写出特别好看的UI出来</p>
<p>具体他们之间的层级关系如何，由上图所示</p>
<h4>常用的控件</h4>
<ul>
	<li>TextView<p>见名知意,TextView是用来显示文字的控件</p></li>
	<li>Button<p>一个TextView的子类,呈现出来的是一个按钮的效果，例如一个登录按钮</p></li>
	<li>EditText<p>编辑框控件,用户可以在其中输入文字,例如app中常见的登录框，就是他实现的</p></li>
	<li>ImageView<p>用于图片的显示,属性src可以为他指定显示的资源</p></li>
</ul>
<p>我们常用的一些app就是通过这些控件的摆放实现了精美app界面，当然不止上面介绍的这些</p>
<p>这里只是简单的列出了，这几中控件的用途，若要具体怎么用或者更多的控件布局还是推荐去google的官方Guide(由于国内的网络环境，需要自备梯子)</p>
<a href="http://developer.android.com/intl/zh-cn/guide/index.html" target="_blank" rel="external">android guide</a>]]></content>
    
    <summary type="html">
    
      &lt;h4&gt;四大基本布局的思维导图&lt;/h4&gt;
&lt;img src=&quot;http://7xslkm.com2.z0.glb.clouddn.com/%E5%9B%9B%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A
    
    </summary>
    
    
      <category term="android" scheme="http://blog.aimerbsq.com/tags/android/"/>
    
      <category term="layout" scheme="http://blog.aimerbsq.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="http://blog.aimerbsq.com/2016/03/31/first-blog/"/>
    <id>http://blog.aimerbsq.com/2016/03/31/first-blog/</id>
    <published>2016-03-30T16:00:00.000Z</published>
    <updated>2016-03-31T09:17:11.762Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里是关于这个博客的开篇，折腾过wordpress，最终还是选择了以这种形式搭建博客</p>
</blockquote>
<hr>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><ul>
<li><p>其实也用过了一些的博客产品，但总觉得不如自己搭建的爽，尝试过用阿里云搭建WordPress过，<br>由于个人懒得去折腾wordpress的一些配置，优化，最终还是放弃了折腾。<br>转而寻求一种简单的配置，结果github pages 恰巧是我想要的。折腾了几天，借助于jekyll，也就<br>将这个静态博客搭建起来了。各种效果也达到了自己所想的。</p>
</li>
<li><p>关于这个博客，域名是自己在万网上买的已经备案了，主题用的是github 上一个开源的</p>
</li>
<li><p>关于主题地址戳这儿 &gt;&gt;<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="external">Hux</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里是关于这个博客的开篇，折腾过wordpress，最终还是选择了以这种形式搭建博客&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一些说明&quot;&gt;&lt;a href=&quot;#一些说明&quot; class=&quot;headerlink&quot; title=&quot;一些
    
    </summary>
    
    
      <category term="杂谈" scheme="http://blog.aimerbsq.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="生活" scheme="http://blog.aimerbsq.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
